package com.xtdar.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xtdar.app.db.DownloadGame;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DOWNLOAD_GAME.
*/
public class DownloadGameDao extends AbstractDao<DownloadGame, Long> {

    public static final String TABLENAME = "DOWNLOAD_GAME";

    /**
     * Properties of entity DownloadGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GameId = new Property(1, int.class, "GameId", false, "GAME_ID");
        public final static Property GameName = new Property(2, String.class, "GameName", false, "GAME_NAME");
        public final static Property GameVersion = new Property(3, String.class, "GameVersion", false, "GAME_VERSION");
    };


    public DownloadGameDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_GAME' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GAME_ID' INTEGER NOT NULL ," + // 1: GameId
                "'GAME_NAME' TEXT," + // 2: GameName
                "'GAME_VERSION' TEXT);"); // 3: GameVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_GAME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadGame entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGameId());
 
        String GameName = entity.getGameName();
        if (GameName != null) {
            stmt.bindString(3, GameName);
        }
 
        String GameVersion = entity.getGameVersion();
        if (GameVersion != null) {
            stmt.bindString(4, GameVersion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DownloadGame readEntity(Cursor cursor, int offset) {
        DownloadGame entity = new DownloadGame( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // GameId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // GameName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // GameVersion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DownloadGame entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameId(cursor.getInt(offset + 1));
        entity.setGameName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGameVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DownloadGame entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DownloadGame entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
